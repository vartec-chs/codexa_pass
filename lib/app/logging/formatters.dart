import 'dart:convert';
import 'models.dart';

/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
abstract class LogFormatter {
  String formatLogEntry(LogEntry entry);
  String formatSessionInfo(SessionInfo sessionInfo);
  String formatFileHeader(SessionInfo sessionInfo, LoggerConfig config);
}

/// JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
class JsonLogFormatter implements LogFormatter {
  @override
  String formatLogEntry(LogEntry entry) {
    return entry.toJsonString();
  }

  @override
  String formatSessionInfo(SessionInfo sessionInfo) {
    return sessionInfo.toJsonString();
  }

  @override
  String formatFileHeader(SessionInfo sessionInfo, LoggerConfig config) {
    final header = {
      'fileType': 'application_log',
      'version': '1.0',
      'createdAt': DateTime.now().toIso8601String(),
      'sessionInfo': sessionInfo.toJson(),
      'config': {
        'maxFileSize': config.maxFileSize,
        'maxTotalSize': config.maxTotalSize,
        'flushIntervalMs': config.flushIntervalMs,
        'maxMemoryEntries': config.maxMemoryEntries,
        'minLevel': config.minLevel.name,
        'prettyFileFormat': config.prettyFileFormat,
      },
    };
    return '// File Header: ${jsonEncode(header)}';
  }
}

/// –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
class PrettyLogFormatter implements LogFormatter {
  static final String _separator = '‚ïê' * 80;
  static final String _minorSeparator = '‚îÄ' * 40;

  @override
  String formatLogEntry(LogEntry entry) {
    final buffer = StringBuffer();

    // Timestamp –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    buffer.writeln(
      '‚îå‚îÄ ${_getLevelIcon(entry.level)} ${entry.level.name.toUpperCase()} ‚îÄ ${_formatTimestamp(entry.timestamp)} ‚îÄ',
    );

    // –°–µ—Å—Å–∏—è –∏ —Ç–µ–≥
    buffer.writeln('‚îÇ Session: ${entry.sessionId.substring(0, 8)}...');
    if (entry.tag != null) {
      buffer.writeln('‚îÇ Tag: ${entry.tag}');
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ
    buffer.writeln('‚îÇ');
    final messageLines = entry.message.split('\n');
    for (final line in messageLines) {
      buffer.writeln('‚îÇ $line');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (entry.extra != null && entry.extra!.isNotEmpty) {
      buffer.writeln('‚îÇ');
      buffer.writeln('‚îÇ Extra Data:');
      final prettyExtra = const JsonEncoder.withIndent(
        '  ',
      ).convert(entry.extra);
      final extraLines = prettyExtra.split('\n');
      for (final line in extraLines) {
        buffer.writeln('‚îÇ   $line');
      }
    }

    // –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
    if (entry.stackTrace != null) {
      buffer.writeln('‚îÇ');
      buffer.writeln('‚îÇ Stack Trace:');
      final stackLines = entry.stackTrace!.split('\n');
      for (final line in stackLines.take(10)) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        if (line.trim().isNotEmpty) {
          buffer.writeln('‚îÇ   $line');
        }
      }
      if (stackLines.length > 10) {
        buffer.writeln('‚îÇ   ... (${stackLines.length - 10} more lines)');
      }
    }

    buffer.writeln('‚îî${'‚îÄ' * 78}');

    return buffer.toString();
  }

  @override
  String formatSessionInfo(SessionInfo sessionInfo) {
    final buffer = StringBuffer();

    buffer.writeln(_separator);
    buffer.writeln('üöÄ SESSION STARTED');
    buffer.writeln(_separator);
    buffer.writeln('Session ID: ${sessionInfo.sessionId}');
    buffer.writeln('Start Time: ${_formatTimestamp(sessionInfo.startTime)}');
    buffer.writeln();

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    buffer.writeln('üì± APPLICATION INFO');
    buffer.writeln(_minorSeparator);
    final appInfo = sessionInfo.appInfo;
    buffer.writeln('Name: ${appInfo['appName'] ?? 'Unknown'}');
    buffer.writeln('Package: ${appInfo['packageName'] ?? 'Unknown'}');
    buffer.writeln(
      'Version: ${appInfo['version'] ?? 'Unknown'} (${appInfo['buildNumber'] ?? 'Unknown'})',
    );
    buffer.writeln();

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    buffer.writeln('üíª DEVICE INFO');
    buffer.writeln(_minorSeparator);
    final deviceInfo = sessionInfo.deviceInfo;
    buffer.writeln('Platform: ${deviceInfo['platform'] ?? 'Unknown'}');
    buffer.writeln('Model: ${deviceInfo['model'] ?? 'Unknown'}');
    if (deviceInfo['manufacturer'] != null) {
      buffer.writeln('Manufacturer: ${deviceInfo['manufacturer']}');
    }
    if (deviceInfo['version'] != null) {
      buffer.writeln('OS Version: ${deviceInfo['version']}');
    }
    buffer.writeln();
    buffer.writeln(_separator);

    return buffer.toString();
  }

  @override
  String formatFileHeader(SessionInfo sessionInfo, LoggerConfig config) {
    final buffer = StringBuffer();

    buffer.writeln('/*');
    buffer.writeln(' * Application Log File');
    buffer.writeln(' * Generated: ${DateTime.now().toIso8601String()}');
    buffer.writeln(' * Session: ${sessionInfo.sessionId}');
    buffer.writeln(' * Format: Pretty Text');
    buffer.writeln(' */');
    buffer.writeln();

    return buffer.toString();
  }

  String _getLevelIcon(AppLogLevel level) {
    switch (level) {
      case AppLogLevel.debug:
        return 'üêõ';
      case AppLogLevel.info:
        return '‚ÑπÔ∏è';
      case AppLogLevel.warning:
        return '‚ö†Ô∏è';
      case AppLogLevel.error:
        return '‚ùå';
      case AppLogLevel.fatal:
        return 'üíÄ';
      case AppLogLevel.crash:
        return 'üí•';
    }
  }

  String _formatTimestamp(DateTime timestamp) {
    return '${timestamp.day.toString().padLeft(2, '0')}/'
        '${timestamp.month.toString().padLeft(2, '0')}/'
        '${timestamp.year} '
        '${timestamp.hour.toString().padLeft(2, '0')}:'
        '${timestamp.minute.toString().padLeft(2, '0')}:'
        '${timestamp.second.toString().padLeft(2, '0')}.'
        '${timestamp.millisecond.toString().padLeft(3, '0')}';
  }
}
